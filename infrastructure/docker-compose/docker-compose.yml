version: '3.7'

services:
  postgres:
    image: postgres:15-alpine
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=123
    logging:
      options:
        max-size: 10m
        max-file: "3"
    ports:
      - '5438:5432'
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/create_tables.sql
    networks:
      - ordering-food-network

  zookeeper:
    image: confluentinc/cp-zookeeper:${KAFKA_VERSION:-latest}
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SERVERS: zookeeper:2888:3888
      KAFKA_OPTS: "-Dzookeeper.4lw.commands.whitelist=ruok"
    volumes:
      - "./volumes/zookeeper/data:/data/zookeeper/data"
      - "./volumes/zookeeper/transactions:/data/zookeeper/log"
    depends_on:
      - postgres
    networks:
      - ordering-food-network

  schema-registry:
    image: confluentinc/cp-schema-registry:${KAFKA_VERSION}
    hostname: schema-registry
    depends_on:
      - kafka-broker-1
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeper:2181'
      SCHEMA_REGISTRY_LISTENERS: http://schema-registry:8081
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka-broker-1:9092,LISTENER_LOCAL://kafka-broker-1:19092
      SCHEMA_REGISTRY_DEBUG: 'true'
    networks:
      - ordering-food-network

  kafka-broker-1:
    image: confluentinc/cp-kafka:${KAFKA_VERSION}
    hostname: kafka-broker-1
    user: root
    ports:
      - "19092:19092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker-1:9092,LISTENER_LOCAL://kafka-broker-1:19092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,LISTENER_LOCAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_COMPRESSION_TYPE: producer
    depends_on:
      - zookeeper
    volumes:
      - "./volumes/kafka/broker-1:/data/broker-1"
    networks:
      - ordering-food-network

  kafka-manager:
    image: hlebalbau/kafka-manager:stable
    restart: always
    ports:
      - "9000:9000"
    environment:
      ZK_HOSTS: "zookeeper:2181"
    networks:
      - ordering-food-network

  init-kafka:
    image: confluentinc/cp-kafka:${KAFKA_VERSION}
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # block until kafka is reachable
      kafka-topics --bootstrap-server kafka-broker-1:9092 --list
      
      echo -e 'Deleting kafka topics'
      kafka-topics --bootstrap-server kafka-broker-1:9092 --topic payment-request --delete --if-exists
      kafka-topics --bootstrap-server kafka-broker-1:9092 --topic payment-response --delete --if-exists
      kafka-topics --bootstrap-server kafka-broker-1:9092 --topic restaurant-approval-request --delete --if-exists
      kafka-topics --bootstrap-server kafka-broker-1:9092 --topic restaurant-approval-response --delete --if-exists
      kafka-topics --bootstrap-server kafka-broker-1:9092 --topic customer --delete --if-exists
      
      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka-broker-1:9092 --create --if-not-exists --topic payment-request --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka-broker-1:9092 --create --if-not-exists --topic payment-response --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka-broker-1:9092 --create --if-not-exists --topic restaurant-approval-request --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka-broker-1:9092 --create --if-not-exists --topic restaurant-approval-response --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka-broker-1:9092 --create --if-not-exists --topic customer --replication-factor 1 --partitions 1
      
      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka-broker-1:9092 --list
      "
    depends_on:
      - schema-registry
    networks:
      - ordering-food-network

  customer-service:
    image: ru.avalc/customer.service:${PROJECT_VERSION}
    pull_policy: never
    ports:
      - "8184:8184"
    deploy:
      restart_policy:
        condition: on-failure
        delay: 60s
        max_attempts: 5
        window: 180s
    depends_on:
      - init-kafka
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: 123
      DB_NAME: postgres
      DB_SCHEMA: customer
      KAFKA-CONFIG.BOOTSTRAP_SERVERS: kafka-broker-1:19092
      KAFKA-CONFIG.SCHEMA_REGISTRY_URL: http://schema-registry:8081
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/postgres?currentSchema=customer&binaryTransfer=true&reWriteBatchedInserts=true&stringtype=unspecified
    networks:
      - ordering-food-network

  order-service:
    image: ru.avalc/order.service:${PROJECT_VERSION}
    pull_policy: never
    ports:
      - "8181:8181"
    deploy:
      restart_policy:
        condition: on-failure
        delay: 60s
        max_attempts: 5
        window: 180s
    depends_on:
      - init-kafka
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: 123
      DB_NAME: postgres
      DB_SCHEMA: order
      KAFKA-CONFIG.BOOTSTRAP_SERVERS: kafka-broker-1:19092
      KAFKA-CONFIG.SCHEMA_REGISTRY_URL: http://schema-registry:8081
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/postgres?currentSchema=order&binaryTransfer=true&reWriteBatchedInserts=true&stringtype=unspecified
    networks:
      - ordering-food-network

  payment-service:
    image: ru.avalc/payment.service:${PROJECT_VERSION}
    pull_policy: never
    ports:
      - "8182:8182"
    deploy:
      restart_policy:
        condition: on-failure
        delay: 60s
        max_attempts: 5
        window: 180s
    depends_on:
      - init-kafka
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: 123
      DB_NAME: postgres
      DB_SCHEMA: payment
      KAFKA-CONFIG.BOOTSTRAP_SERVERS: kafka-broker-1:19092
      KAFKA-CONFIG.SCHEMA_REGISTRY_URL: http://schema-registry:8081
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/postgres?currentSchema=payment&binaryTransfer=true&reWriteBatchedInserts=true&stringtype=unspecified
    networks:
      - ordering-food-network

  restaurant-service:
    image: ru.avalc/restaurant.service:${PROJECT_VERSION}
    pull_policy: never
    ports:
      - "8183:8183"
    deploy:
      restart_policy:
        condition: on-failure
        delay: 60s
        max_attempts: 5
        window: 180s
    depends_on:
      - init-kafka
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: 123
      DB_NAME: postgres
      DB_SCHEMA: restaurant
      KAFKA-CONFIG.BOOTSTRAP_SERVERS: kafka-broker-1:19092
      KAFKA-CONFIG.SCHEMA_REGISTRY_URL: http://schema-registry:8081
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/postgres?currentSchema=restaurant&binaryTransfer=true&reWriteBatchedInserts=true&stringtype=unspecified
    networks:
      - ordering-food-network

networks:
  ordering-food-network:
